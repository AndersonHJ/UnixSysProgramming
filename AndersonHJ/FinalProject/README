Hardware Statement
Instance type : t2.micro
vCPUs : 1
Memory : 1GB
Storage : 8GB general purpose SSD
Network interfaces : eth0
Operating System : Ubuntu Server 14.04 LTS (HVM), SSD Volume Type  64-bit

System Software Statement
Operating System : Ubuntu Server 14.04 LTS (HVM), SSD Volume Type  64-bit
Web server : Apache2  
Database : Mysql 5.6
PHP : Memory_limit 512MB

LAMP is an archetypal model of web service solution stacks, named as an acronym of the names of its original four open-source components: 
the Linux operating system, the Apache HTTP Server, the MySQL relational database management system (RDBMS), and the PHP. 
The LAMP components are largely interchangeable and not limited to the original selection. As a solution stack, 
LAMP is suitable for building dynamic web sites and web applications.

1. Launch a VM: Because our website is just in the beginning, we choose t2.mirco. 
Just login to aws.amazon.com, sign in to the console, choose EC2 service, click "Launch instance", 
and choose ubuntu. Although there is no significantly difference between those servers, load balancer and database server, 
we have make a plan in our future usage. We will use t2.xlarge model as the load balancer, 
with the configuration:vCPU 4, Mem 30.5GiB, storage 800 SSD. 
For the database server, we choose d2.xlarge model, with the configuration: vCPU 4, Mem 30.5, Storage 3*2000 HDD. 

2. Config a VW: Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu
Step 1: Install Apache
We can install Apache easily using Ubuntu's package manager, apt. For our purposes, we can get started by typing these commands:
sudo apt-get update
sudo apt-get install apache2
You can do a spot check right away to verify that everything went as planned by visiting your server's public IP address in your web browser :
http://your_server_IP_address

You will see the default Ubuntu 14.04 Apache web page.If you see that page, then your web server is now correctly installed.

Step 2: Install MySQL
MySQL is a database management system. Basically, it will organize and provide access to databases where our site can store information.
Again, we can use apt to acquire and install our software. 
sudo apt-get install mysql-server php5-mysql

Note: In this case, you do not have to run sudo apt-get update prior to the command. This is because we recently ran it in the commands above to install Apache. 
During the installation, your server will ask you to select and confirm a password for the MySQL "root" user. 
When the installation is complete, we need to run some additional commands to get our MySQL environment set up securely.

First, we need to tell MySQL to create its database directory structure where it will store its information. You can do this by typing:
sudo mysql_install_db

Afterwards, we want to run a simple security script that will remove some dangerous defaults and lock down access to our database system a little bit. 
Start the interactive script by running:
sudo mysql_secure_installation


You will be asked to enter the password you set for the MySQL root account. Next, it will ask you if you want to change that password.
For the rest of the questions, you should simply hit the "ENTER" key through each prompt to accept the default values. 
This will remove some sample users and databases, disable remote root logins, and load these new rules so that MySQL immediately respects the changes we have made.
At this point, your database system is now set up and we can move on.

Step 3: Install PHP
PHP is the component of our setup that will process code to display dynamic content. It can run scripts, connect to our MySQL databases to get information, 
and hand the processed content over to our web server to display.
We can once again leverage the apt system to install our components. 
sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt


This should install PHP without any problems. In most cases, we'll want to modify the way that Apache serves files when a directory is requested. 
After this, we need to restart the Apache web server in order for our changes to be recognized. You can do this by typing this:
sudo service apache2 restart


Install PHP Modules
To enhance the functionality of PHP, we can optionally install some additional modules.
If you decide you would like to install a package, you can do so by using the apt-get install command like we have been doing for our other software.
If we decided that php5-cli is something that we need, we could type:
sudo apt-get install php5-cli

If you want to install more than one module, you can do that by listing each one, separated by a space, following the apt-get install command, like this:
sudo apt-get install package1 package2 ...

At this point, your LAMP stack is installed and configured. We should still test out our PHP though.
Now that you have a LAMP stack installed, you have many choices for what to do next. 
Basically, you've installed a platform that will allow you to install most kinds of websites and web software on your server.
