HW11
Kexuan Ma

Goal:
1. Learning how to use Jmeter to load the system.
2. Finding the maximum capacity that can be reached using single instance, two and three instances. 
3. Checking if it can scale linearly. 

VMs:
Load Balancer IP: 172.31.31.207
Server1 IP: 172.31.26.116
Server2 IP: 172.31.20.231
Server3 IP: 172.31.21.94


Test 1—One Server
Steps:  
1. open the Jmeter by command
“cd apache-jmeter-2.13” 
“cd bin/”
“./jmeter.sh”
2. In Jmeter, create one Thread Group, set Loop Count to “Forever”
3.  Create “HTTP Request” “Aggregate Graph” “Aggregate Report” “View Results in Table” and “Graph Results” in thread group. In this case, we can find out maximum capacity from client side.
4.  Because in test 1, we just want to make a one server system, so in HTTP Request, put server1’s IP inside of “Server Name or IP”. Besides, set “Port Number” to 80, “Implementation”: HttpClient4, “Protocol[http]”: http, Method: GET, set “Path:” to “/index.php”(in this homework, every server has same index.php)
5. Before start the Jmeter, check whether the server is valid so no system errors are generated. 
6. Push start button in Jmeter. In server1, use command “vmstat 3” to find out the usage of CPU, Memory and IO.
7. Because we want to find the maximum capacity that can be reached using single instance, so we need to let cpu id to become 0. In this case, we need to stop the Jmeter, increase “Number of Threads(users)” to 10, and then start again to get data.


Results:

From the data of client, we can get these information:
Number of Threads: 10. 
Throughput： 112.102/minute   1.9/sec
KB/sec: 0.4
The limit is CPU

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us  sy id wa st
 0  0      0 854616   7632  95432    0    0     0     0    7    7  0   0 100 0  0
10  0      0 853932   7632  95432    0    0     0     0  115  126 35   0 65  0  0
10  0      0 851280   7632  95432    0    0     0     0  256  268 99   0  0  0  1
10  0      0 851156   7632  95432    0    0     0     0  266  292 100  0  0  0  0
 9  0      0 851124   7640  95432    0    0     0     4  257  267 100  0  0  0  0
10  0      0 851156   7640  95432    0    0     0     3  265  288 100  0  0  0  0
 9  0      0 851156   7648  95436    0    0     0     8  259  275 100  0  0  0  0
10  0      0 851156   7648  95436    0    0     0     0  261  278 100  0  0  0  0
 9  0      0 851124   7656  95436    0    0     0     4  268  298 100  0  0  0  0
11  0      0 851156   7664  95436    0    0     0     4  255  264 100  0  0  0  0
10  0      0 851156   7664  95436    0    0     0     4  267  290 100  0  0  0  0
0.4

Test 2—Two Server
Steps:  
1. Set load balancer, let it connect with server1 and server2. 
<Proxy balancer://loadBalancer>
    #server1
    BalancerMember http://172.31.26.116/
    #server2
    BalancerMember http://172.31.20.231/
</Proxy>
2. Restart apache2 in Load Balancer.
3. let client(Jmeter) to connect with load balancer, in this case, we can have two-server system. (Just change “Server Name or IP” in HTTP Request, put load balancer public IP inside of it.)
4. Before start the Jmeter, check whether the load is valid. 
5. Start and collect the data.

Results:
From the data of client, we can get these information:
Number of Threads: 10. 
Throughput： 215.643/minute   3.7/sec
KB/sec: 0.8
The limit is CPU

 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 840464   9636 105512    0    0     0     0    6    6  0  0 100  0  0
 1  0      0 840464   9636 105512    0    0     0     0   22    9  6   0 94  0  0
 5  0      0 840332   9636 105512    0    0     0     0  285  283 100  0  0  0  0
 5  0      0 839788   9636 105512    0    0     0     0  275  287 100  0  0  0  0
 5  0      0 839820   9644 105516    0    0     0     4  268  281 100  0  0  0  0
 5  0      0 839820   9644 105516    0    0     0     0  262  280 100  0  0  0  0
 4  0      0 839788   9652 105516    0    0     0     4  266  282 100  0  0  0  0
 5  0      0 839820   9660 105516    0    0     0     4  265  286 100  0  0  0  0
 3  0      0 839820   9660 105516    0    0     0     0  263  281 100  0  0  0  0
 4  0      0 839820   9668 105516    0    0     0     4  262  282 100  0  0  0  0


 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 836544   9596 109536    0    0     0     0    6    5  0  0 100  0  0
 5  0      0 836512   9604 109536    0    0     0     4  156  131 52   0 48  0  0
 5  0      0 835436   9604 109540    0    0     0     0  279  284 100  0  0  0  0
 5  0      0 835436   9612 109540    0    0     0     4  266  280 100  0  0  0  0
 5  0      0 835436   9612 109540    0    0     0     0  270  291 100  0  0  0  0
 5  0      0 835404   9620 109540    0    0     0     4  266  287 100  0  0  0  0
 5  0      0 835436   9628 109540    0    0     0    11  268  285 100  0  0  0  0
 5  0      0 834148   9628 109544    0    0     0     0  268  290 100  0  0  0  0
 5  0      0 833396   9636 109552    0    0     1     7  294  334 100  0  0  0  0
 6  0      0 834032   9636 109552    0    0     0     0  294  343 99   1  0  0  0






Test 3—Three Server
Steps:  
1. Modify load balancer’s 000-default.conf, let it connect with server1, server2 and server3. 
<Proxy balancer://loadBalancer>
    #server1
    BalancerMember http://172.31.26.116/
    #server2
BalancerMember http://172.31.20.231/
    #server3
    BalancerMember http://172.31.21.94/
</Proxy>
2. Restart apache2 in Load Balancer.
3. check whether the load is valid. 
4. Start and collect the data.

Results:
From the data of client, we can get these information:
Number of Threads: 10. 
Throughput： 292.217/minute   4.9/sec
KB/sec: 1.1
The limit is CPU


 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us  sy id wa st
 0  0      0 840196   9876 105544    0    0     0     0    6    7  0   0 100  0  0
 4  0      0 840164   9880 105544    0    0     0     1  135  119 48   0 51  0  0
 3  0      0 840196   9880 105544    0    0     0     0  263  275 100  0  0  0  0
 2  0      0 840196   9888 105544    0    0     0     4  262  269 100  0  0  0  0
 1  0      0 840164   9888 105548    0    0     0     0  262  264 100  0  0  0  0
 1  0      0 840196   9896 105548    0    0     0     4  253  134 96   0  4  0  0
 1  0      0 840196   9896 105548    0    0     0     0  230   34 87   0 13  0  0
 1  0      0 840072   9904 105548    0    0     0     4  223   38 84   0 16  0  0
 1  0      0 840040   9912 105540    0    0     0     4  206   31 78   0 22  0  0


 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us  sy id wa st
 0  0      0 835792   9872 109584    0    0     0     0    8    8  0   0 100 0  0
 2  0      0 835760   9872 109584    0    0     0     1   55   33 18   0 82  0  1
 0  0      0 835792   9872 109584    0    0     0     0  144   51 50   0 50  0  0
 1  0      0 835792   9880 109584    0    0     0     4  115   31 39   0 61  0  0
 3  0      0 835792   9880 109584    0    0     0     0  265  268 100  0  0  0  0
 2  0      0 835544   9888 109584    0    0     0     5  265  294 100  0  0  0  0
 2  0      0 835544   9888 109588    0    0     0     0  261  258 100  0  0  0  0
 1  0      0 835544   9896 109588    0    0     0     7  245   82 92   0  8  0  0
 1  0      0 835544   9904 109580    0    0     0     4  248   47 95   0  5  0  0


 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us  sy id wa st
 0  0      0 851524   7240 101184    0    0     0     1    9    8  0   0 100 0  0
 4  0      0 850244   7240 101184    0    0     0     0  154  144 55   0 45  0  0
 4  0      0 849020   7248 101184    0    0     0     7  264  283 100  0  0  0  0
 6  0      0 848516   7248 101184    0    0     0     0  263  282 100  0  0  0  0
 7  0      0 848080   7256 101184    0    0     0     4  264  287 100  0  0  0  0
 8  0      0 847420   7256 101184    0    0     0     0  262  279 100  0  0  0  0
 8  0      0 846700   7264 101184    0    0     0     4  263  284 100  0  0  0  0
 9  0      0 846700   7272 101180    0    0     0     4  260  277 100  0  0  0  0
 9  0      0 846700   7272 101188    0    0     0     0  260  275 100  0  0  0  0




Conclusion:

For One-Server System, the max capacity is 1.9/sec, two-server system is 3.7/sec and for three-server system, the max capacity is 4.9/sec. therefore, the increasing is not scale linearly.
Besides, we could find that the main limit of the capacity is the CPU.
